#include <iostream>  
void heapify(int arr[], int n, int i)                    //function to create max heap 
{ 
	int largest = i;                            //initializing n/2 element as i anf consedering ot to be largest        
	int l = 2*i + 1;                            
	int r = 2*i + 2; 
		if (l < n && arr[l] > arr[largest])                //checking if left child is larger than node
		largest = l; 
		if (r < n && arr[r] > arr[largest])                //checking if right child is larger than node
		largest = r; 
	if (largest != i)                                   //swapig if largest is not equal to node
	{ 
		swap(arr[i], arr[largest]); 
		heapify(arr, n, largest);                           //recursively calling heapify 
	} 
} 

 
void heapSort(int arr[], int n)                             //main function for heap sort
{ 
 
	for (int i = n / 2 - 1; i >= 0; i--) 
		heapify(arr, n, i); 

	for (int i=n-1; i>0; i--) 
	{ 
			swap(arr[0], arr[i]); 
			heapify(arr, i, 0); 
	} 
} 
void printArray(int arr[], int n)                                //to print output
{ 
	for (int i=0; i<n; ++i) 
		cout << arr[i] << " "; 
	cout << "\n"; 
} 
int main()                                                       //mian function
{ 
	int arr[] = {4, 1, 45, 5, 9, 72}; 
	int n = sizeof(arr)/sizeof(arr[0]);                                   //to count number of elements

	heapSort(arr, n); 

	cout << "Sorted array is \n";                                       
	printArray(arr, n); 
} 
